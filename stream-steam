#!/usr/bin/env python3
import os
import sys
from webbrowser import open as webbrowser_open

import click
from cli import colors, echo
from cli.colors import ERROR, NEUTRAL, SUCCESS, WARNING
from cli.config import ConfigManager
from clients.web_tracking.helper import HTTP_SERVE_ADDRESS, HTTP_SERVE_PORT, create_demo_index_file, serve_demo
from dateutil import tz
from engine import VERSION
from engine.stack import CloudformationStack
from juniper.cli import build as juniper_build
from modules import Modules

ENV = "dev"  # TODO: make it configurable, someday, maybe...
CF_STACK_NAME = f"stream-steam-{ENV}"

cfg = ConfigManager(ENV)
modules = Modules(cfg)


@click.group()
@click.version_option(VERSION, message="StreamSteam, v%(version)s")
def cli():
    pass


@click.command()
def config():
    # AWS Credentials and region_name
    echo.h1(f"Configuration of you  r AWS '{ENV}' env")
    echo.enum_elm("AWS Access Key", nl=False)
    cfg.set("aws_access_key_id", click.prompt("", default=cfg.get("aws_access_key_id")))

    echo.enum_elm("AWS Secret Key", nl=False)
    cfg.set(
        "aws_secret_access_key",
        click.prompt("", default=cfg.get("aws_secret_access_key"), hide_input=True, show_default=False),
    )

    echo.enum_elm("AWS Region", nl=False)
    cfg.set("aws_region_name", click.prompt("AWS Region", default=cfg.get("aws_region_name") or "eu-central-1"))

    # Geo location lookup
    echo.h1("Configure IP geolocation lookup - requires an https://ipinfo.io account")
    if click.confirm("Do you want to enable IP geolocation lookup?"):
        echo.enum_elm("IPInfo API Token", nl=False)
        cfg.set(
            "ip_info_api_token",
            click.prompt("", default=cfg.get("ip_info_api_token"), hide_input=True, show_default=False),
        )
        cfg.set("ip_geocoding_enabled", "true")
    else:
        cfg.set("ip_geocoding_enabled", "false")

    # Device type detection
    echo.h1("Configure Device Type detection - requires an https://userstack.com/ account ")
    if click.confirm("Do you want to enable device type detection?"):
        echo.enum_elm("Userstack API Token", nl=False)
        cfg.set(
            "userstack_api_token",
            click.prompt("", default=cfg.get("userstack_api_token"), hide_input=True, show_default=False),
        )
        cfg.set("device_detection_enabled", "true")
    else:
        cfg.set("device_detection_enabled", "false")

    cfg.write()
    echo.info("")
    echo.info("Run this command at any time to update your existing configuration.")
    echo.success(f"Config written to {cfg.file}")
    echo.info("")


@click.command()
def build():
    echo.h1("Packaging")
    echo.enum_elm("building lambda packages...")
    os.chdir("engine/event_receiver")
    del sys.argv[0]
    juniper_build()


@click.command()
def deploy():
    echo.h1(f"Deployment '{CF_STACK_NAME}'")
    echo.enum_elm("deploying...")
    cf_stack = CloudformationStack(CF_STACK_NAME, cfg)
    cf_stack.deploy()
    echo.enum_elm("your stack is up2date!")
    echo.info("")


@click.command()
def describe_deployment():
    echo.h1("Fetching Stack Info")
    cf_stack = CloudformationStack(CF_STACK_NAME, cfg)

    echo.enum_elm("loading stack outputs...")
    outputs = cf_stack.get_outputs()

    echo.h1("Stack infos")
    for output in outputs:
        echo.enum_elm(f"{output['OutputKey']}: {output['OutputValue']}")


@click.command()
def events():
    echo.h1("Fetching Stack Events")
    cf_stack = CloudformationStack(CF_STACK_NAME, cfg)

    echo.enum_elm("loading latest stack events...")
    events = cf_stack.get_latest_events()

    echo.h1("Latest Events")
    for event in events:
        if event["ResourceStatus"] in ("CREATE_FAILED", "UPDATE_FAILED", "DELETE_FAILED"):
            dash_color = ERROR
        elif event["ResourceStatus"] in ("CREATE_IN_PROGRESS", "UPDATE_IN_PROGRESS", "DELETE_IN_PROGRESS",):
            dash_color = NEUTRAL
        else:
            dash_color = SUCCESS

        echo.enum_elm(
            f"{event['Timestamp'].astimezone(tz.tzlocal()).strftime('%Y-%m-%d %H:%m')} | "
            f"{event['ResourceType']} | "
            f"{event['ResourceStatus']} | "
            f"{event.get('ResourceStatusReason', '-')}",
            dash_color=dash_color,
        )


@cli.group()
def module():
    pass


@module.command("list")
def module_list():
    echo.h1("Enabled Modules")
    for module in modules.enabled().values():
        echo.enum_elm(f"{module.id}: {module.description}")

    echo.h1("Disabled Modules")
    for module in modules.disabled().values():
        echo.enum_elm(f"{module.id}: {module.description}", dash_color=ERROR)


@module.command("enable")
@click.option("--name", required=True, type=click.Choice(modules.keys(), case_sensitive=False))
def module_enable(name):
    echo.h1(f"Module '{name}'")
    if name in modules.enabled().keys():
        echo.error("module already enabled")
        exit(2)

    cfg.add_to_list("modules_enabled", name)
    cfg.write()
    install_warning = modules[name].install_warning
    if install_warning:
        echo.enum_elm(f"!!! WARNING !!! {install_warning}", dash_color=WARNING)
    echo.enum_elm("successfully enabled module")
    echo.enum_elm("your modified stack is ready for deployment")
    echo.info("")


@module.command("disable")
@click.option("--name", required=True, type=click.Choice(modules.keys(), case_sensitive=False))
def module_disable(name):
    echo.h1(f"Module '{name}'")

    if name not in modules.enabled().keys():
        echo.error("module is not enabled, therefore it can'template be deactivated")
        exit(2)

    echo.enum_elm(
        "are you sure?! All module related components, including S3 Buckets, will be deleted on the next deployment...",
        nl=False,
        dash_color=WARNING,
    )
    if click.confirm(""):
        cfg.remove_from_list("modules_enabled", name)
        cfg.write()
        echo.enum_elm("successfully disabled module")
        echo.info("")


@click.command()
def destroy():
    echo.h1(f"Destroy stack '{CF_STACK_NAME}' !!!!11einself")
    echo.enum_elm(
        "are you sure?! All components of your stack including S3 Buckets, will be delete...",
        nl=False,
        dash_color=WARNING,
    )
    if click.confirm(""):
        echo.enum_elm("destroying...")
        cf_stack = CloudformationStack(CF_STACK_NAME, cfg)
        cf_stack.destroy()
        echo.enum_elm("successfully destroyed")
        echo.info("")


@click.command()
def demo_web_tracking():
    serve_url = f"http://{HTTP_SERVE_ADDRESS}:{HTTP_SERVE_PORT}/"

    # create index.html
    cf_stack = CloudformationStack(CF_STACK_NAME, cfg)
    create_demo_index_file(f'{cf_stack.get_output("APIGatewayEndpoint")}/event-receiver/')

    # serve the demo
    echo.enum_elm(f"serving demo at {serve_url}")
    echo.enum_elm("quit the server with strg|control-c.")
    serve_demo()

    # open browser
    webbrowser_open(serve_url)


cli.add_command(config)
cli.add_command(build)
cli.add_command(deploy)
cli.add_command(describe_deployment)
cli.add_command(demo_web_tracking)
cli.add_command(destroy)
cli.add_command(events)


if __name__ == "__main__":
    click.echo("")
    click.secho(r"     ______                     ______", fg=colors.PRIMARY)
    click.secho(r"    / __/ /________ ___ ___ _  / __/ /____ ___ ___ _ ", fg=colors.PRIMARY)
    click.secho("   _\ \/ __/ __/ -_) _ `/  ' \_\ \/ __/ -_) _ `/  ' \\", fg=colors.PRIMARY)
    click.secho(r"  /___/\__/_/  \__/\_,_/_/_/_/___/\__/\__/\_,_/_/_/_/", fg=colors.SECONDARY)
    click.echo("")
    cli()
